/**
 * This class is generated by jOOQ
 */
package jooq.database.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;

import jooq.database.tables.Txn;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TxnRecord extends UpdatableRecordImpl<TxnRecord> implements Record6<Integer, Short, Short, Short, Timestamp, Integer> {

	private static final long serialVersionUID = 2077052667;

	/**
	 * Setter for <code>public.Txn.txn_id</code>.
	 */
	public void setTxnId(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>public.Txn.txn_id</code>.
	 */
	public Integer getTxnId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>public.Txn.nVersion</code>.
	 */
	public void setNversion(Short value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>public.Txn.nVersion</code>.
	 */
	public Short getNversion() {
		return (Short) getValue(1);
	}

	/**
	 * Setter for <code>public.Txn.inCounter</code>.
	 */
	public void setIncounter(Short value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>public.Txn.inCounter</code>.
	 */
	public Short getIncounter() {
		return (Short) getValue(2);
	}

	/**
	 * Setter for <code>public.Txn.outCounter</code>.
	 */
	public void setOutcounter(Short value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>public.Txn.outCounter</code>.
	 */
	public Short getOutcounter() {
		return (Short) getValue(3);
	}

	/**
	 * Setter for <code>public.Txn.lock_time</code>.
	 */
	public void setLockTime(Timestamp value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>public.Txn.lock_time</code>.
	 */
	public Timestamp getLockTime() {
		return (Timestamp) getValue(4);
	}

	/**
	 * Setter for <code>public.Txn.block_id</code>.
	 */
	public void setBlockId(Integer value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>public.Txn.block_id</code>.
	 */
	public Integer getBlockId() {
		return (Integer) getValue(5);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record6 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row6<Integer, Short, Short, Short, Timestamp, Integer> fieldsRow() {
		return (Row6) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row6<Integer, Short, Short, Short, Timestamp, Integer> valuesRow() {
		return (Row6) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Txn.TXN.TXN_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Short> field2() {
		return Txn.TXN.NVERSION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Short> field3() {
		return Txn.TXN.INCOUNTER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Short> field4() {
		return Txn.TXN.OUTCOUNTER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field5() {
		return Txn.TXN.LOCK_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field6() {
		return Txn.TXN.BLOCK_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getTxnId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Short value2() {
		return getNversion();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Short value3() {
		return getIncounter();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Short value4() {
		return getOutcounter();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value5() {
		return getLockTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value6() {
		return getBlockId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TxnRecord value1(Integer value) {
		setTxnId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TxnRecord value2(Short value) {
		setNversion(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TxnRecord value3(Short value) {
		setIncounter(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TxnRecord value4(Short value) {
		setOutcounter(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TxnRecord value5(Timestamp value) {
		setLockTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TxnRecord value6(Integer value) {
		setBlockId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TxnRecord values(Integer value1, Short value2, Short value3, Short value4, Timestamp value5, Integer value6) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached TxnRecord
	 */
	public TxnRecord() {
		super(Txn.TXN);
	}

	/**
	 * Create a detached, initialised TxnRecord
	 */
	public TxnRecord(Integer txnId, Short nversion, Short incounter, Short outcounter, Timestamp lockTime, Integer blockId) {
		super(Txn.TXN);

		setValue(0, txnId);
		setValue(1, nversion);
		setValue(2, incounter);
		setValue(3, outcounter);
		setValue(4, lockTime);
		setValue(5, blockId);
	}
}
