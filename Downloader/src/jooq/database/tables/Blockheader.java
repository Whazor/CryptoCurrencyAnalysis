/**
 * This class is generated by jOOQ
 */
package jooq.database.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.database.Keys;
import jooq.database.Public;
import jooq.database.tables.records.BlockheaderRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Blockheader extends TableImpl<BlockheaderRecord> {

	private static final long serialVersionUID = 1319976390;

	/**
	 * The reference instance of <code>public.BlockHeader</code>
	 */
	public static final Blockheader BLOCKHEADER = new Blockheader();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<BlockheaderRecord> getRecordType() {
		return BlockheaderRecord.class;
	}

	/**
	 * The column <code>public.BlockHeader.id</code>.
	 */
	public final TableField<BlockheaderRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.BlockHeader.nVersion</code>.
	 */
	public final TableField<BlockheaderRecord, Short> NVERSION = createField("nVersion", org.jooq.impl.SQLDataType.SMALLINT, this, "");

	/**
	 * The column <code>public.BlockHeader.hashPrevBlock</code>.
	 */
	public final TableField<BlockheaderRecord, String> HASHPREVBLOCK = createField("hashPrevBlock", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>public.BlockHeader.hashMerkleRoot</code>.
	 */
	public final TableField<BlockheaderRecord, String> HASHMERKLEROOT = createField("hashMerkleRoot", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>public.BlockHeader.nTime</code>.
	 */
	public final TableField<BlockheaderRecord, Timestamp> NTIME = createField("nTime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>public.BlockHeader.nBits</code>.
	 */
	public final TableField<BlockheaderRecord, Long> NBITS = createField("nBits", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>public.BlockHeader.nonce</code>.
	 */
	public final TableField<BlockheaderRecord, Long> NONCE = createField("nonce", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * Create a <code>public.BlockHeader</code> table reference
	 */
	public Blockheader() {
		this("BlockHeader", null);
	}

	/**
	 * Create an aliased <code>public.BlockHeader</code> table reference
	 */
	public Blockheader(String alias) {
		this(alias, BLOCKHEADER);
	}

	private Blockheader(String alias, Table<BlockheaderRecord> aliased) {
		this(alias, aliased, null);
	}

	private Blockheader(String alias, Table<BlockheaderRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<BlockheaderRecord, Integer> getIdentity() {
		return Keys.IDENTITY_BLOCKHEADER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<BlockheaderRecord> getPrimaryKey() {
		return Keys.BLOCKHEADER_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<BlockheaderRecord>> getKeys() {
		return Arrays.<UniqueKey<BlockheaderRecord>>asList(Keys.BLOCKHEADER_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<BlockheaderRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<BlockheaderRecord, ?>>asList(Keys.BLOCKHEADER__BLOCKHEADER_ID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Blockheader as(String alias) {
		return new Blockheader(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Blockheader rename(String name) {
		return new Blockheader(name, null);
	}
}
